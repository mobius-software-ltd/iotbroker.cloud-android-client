package com.mobius.software.android.iotbroker.main.dal;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mobius.software.android.iotbroker.main.dal.Accounts;

/**
 * Mobius Software LTD
 * Copyright 2015-2017, Mobius Software LTD
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNTS".
*/
public class AccountsDao extends AbstractDao<Accounts, Long> {

    public static final String TABLENAME = "ACCOUNTS";

    /**
     * Properties of entity Accounts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProtocolType = new Property(1, Integer.class, "protocolType", false, "PROTOCOL_TYPE");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property ClientID = new Property(4, String.class, "clientID", false, "CLIENT_ID");
        public final static Property ServerHost = new Property(5, String.class, "serverHost", false, "SERVER_HOST");
        public final static Property Port = new Property(6, Integer.class, "port", false, "PORT");
        public final static Property CleanSession = new Property(7, Boolean.class, "cleanSession", false, "CLEAN_SESSION");
        public final static Property KeepAlive = new Property(8, Integer.class, "keepAlive", false, "KEEP_ALIVE");
        public final static Property Will = new Property(9, String.class, "will", false, "WILL");
        public final static Property WillTopic = new Property(10, String.class, "willTopic", false, "WILL_TOPIC");
        public final static Property Qos = new Property(11, Integer.class, "qos", false, "QOS");
        public final static Property IsDefault = new Property(12, Boolean.class, "isDefault", false, "IS_DEFAULT");
        public final static Property IsRetain = new Property(13, Boolean.class, "isRetain", false, "IS_RETAIN");
    };

    private DaoSession daoSession;


    public AccountsDao(DaoConfig config) {
        super(config);
    }
    
    public AccountsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROTOCOL_TYPE\" INTEGER," + // 1: protocolType
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"PASSWORD\" TEXT," + // 3: password
                "\"CLIENT_ID\" TEXT," + // 4: clientID
                "\"SERVER_HOST\" TEXT," + // 5: serverHost
                "\"PORT\" INTEGER," + // 6: port
                "\"CLEAN_SESSION\" INTEGER," + // 7: cleanSession
                "\"KEEP_ALIVE\" INTEGER," + // 8: keepAlive
                "\"WILL\" TEXT," + // 9: will
                "\"WILL_TOPIC\" TEXT," + // 10: willTopic
                "\"QOS\" INTEGER," + // 11: qos
                "\"IS_DEFAULT\" INTEGER," + // 12: isDefault
                "\"IS_RETAIN\" INTEGER);"); // 13: isRetain
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNTS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Accounts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer protocolType = entity.getProtocolType();
        if (protocolType != null) {
            stmt.bindLong(2, protocolType);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String clientID = entity.getClientID();
        if (clientID != null) {
            stmt.bindString(5, clientID);
        }
 
        String serverHost = entity.getServerHost();
        if (serverHost != null) {
            stmt.bindString(6, serverHost);
        }
 
        Integer port = entity.getPort();
        if (port != null) {
            stmt.bindLong(7, port);
        }
 
        Boolean cleanSession = entity.getCleanSession();
        if (cleanSession != null) {
            stmt.bindLong(8, cleanSession ? 1L: 0L);
        }
 
        Integer keepAlive = entity.getKeepAlive();
        if (keepAlive != null) {
            stmt.bindLong(9, keepAlive);
        }
 
        String will = entity.getWill();
        if (will != null) {
            stmt.bindString(10, will);
        }
 
        String willTopic = entity.getWillTopic();
        if (willTopic != null) {
            stmt.bindString(11, willTopic);
        }
 
        Integer qos = entity.getQos();
        if (qos != null) {
            stmt.bindLong(12, qos);
        }
 
        Boolean isDefault = entity.getIsDefault();
        if (isDefault != null) {
            stmt.bindLong(13, isDefault ? 1L: 0L);
        }
 
        Boolean isRetain = entity.getIsRetain();
        if (isRetain != null) {
            stmt.bindLong(14, isRetain ? 1L: 0L);
        }
    }

    @Override
    protected void attachEntity(Accounts entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Accounts readEntity(Cursor cursor, int offset) {
        Accounts entity = new Accounts( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // protocolType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // clientID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // serverHost
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // port
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // cleanSession
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // keepAlive
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // will
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // willTopic
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // qos
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isDefault
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0 // isRetain
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Accounts entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProtocolType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClientID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setServerHost(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPort(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCleanSession(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setKeepAlive(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setWill(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWillTopic(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setQos(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setIsDefault(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setIsRetain(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Accounts entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Accounts entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
