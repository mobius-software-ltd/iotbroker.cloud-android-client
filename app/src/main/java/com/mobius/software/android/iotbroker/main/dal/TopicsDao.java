package com.mobius.software.android.iotbroker.main.dal;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.mobius.software.android.iotbroker.main.dal.Topics;

/**
 * Mobius Software LTD
 * Copyright 2015-2017, Mobius Software LTD
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOPICS".
*/
public class TopicsDao extends AbstractDao<Topics, Long> {

    public static final String TABLENAME = "TOPICS";

    /**
     * Properties of entity Topics.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Qos = new Property(1, Integer.class, "qos", false, "QOS");
        public final static Property TopicName = new Property(2, String.class, "topicName", false, "TOPIC_NAME");
        public final static Property AccountID = new Property(3, long.class, "accountID", false, "ACCOUNT_ID");
    };

    private Query<Topics> accounts_TopicsQuery;

    public TopicsDao(DaoConfig config) {
        super(config);
    }
    
    public TopicsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOPICS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"QOS\" INTEGER," + // 1: qos
                "\"TOPIC_NAME\" TEXT," + // 2: topicName
                "\"ACCOUNT_ID\" INTEGER NOT NULL );"); // 3: accountID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOPICS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Topics entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer qos = entity.getQos();
        if (qos != null) {
            stmt.bindLong(2, qos);
        }
 
        String topicName = entity.getTopicName();
        if (topicName != null) {
            stmt.bindString(3, topicName);
        }
        stmt.bindLong(4, entity.getAccountID());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Topics readEntity(Cursor cursor, int offset) {
        Topics entity = new Topics( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // qos
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // topicName
            cursor.getLong(offset + 3) // accountID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Topics entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQos(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTopicName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccountID(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Topics entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Topics entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "topics" to-many relationship of Accounts. */
    public List<Topics> _queryAccounts_Topics(long accountID) {
        synchronized (this) {
            if (accounts_TopicsQuery == null) {
                QueryBuilder<Topics> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AccountID.eq(null));
                accounts_TopicsQuery = queryBuilder.build();
            }
        }
        Query<Topics> query = accounts_TopicsQuery.forCurrentThread();
        query.setParameter(0, accountID);
        return query.list();
    }

}
